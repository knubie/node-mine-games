// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['zepto', 'underscore', 'backbone', 'mustache', 'appscroll', 'models'], function($, _, Backbone, Mustache, AppScroll, models) {
    var Chat, Discarded, Hand, Info, Lobby, Log, Mine, Played, Players, Shop;
    Lobby = (function(_super) {

      __extends(Lobby, _super);

      function Lobby() {
        return Lobby.__super__.constructor.apply(this, arguments);
      }

      Lobby.prototype.initialize = function() {
        console.log('init lobby view');
        this.game = this.options.game;
        this.player = this.options.player;
        this.listenTo(this.game, 'change:players', this.render);
        this.listenTo(this.player, 'change:name', this.render);
        return $('#container').append(this.$el);
      };

      Lobby.prototype.id = 'lobby';

      Lobby.prototype.template = $('#lobby-template').html();

      Lobby.prototype.render = function() {
        return this.$el.html(Mustache.render(this.template, {
          players: this.game.get('players'),
          name: this.player.get('name')
        }));
      };

      Lobby.prototype.events = {
        'click #start-game': 'startGame',
        'submit #name': 'changeName'
      };

      Lobby.prototype.startGame = function() {
        return this.game.start();
      };

      Lobby.prototype.changeName = function(e) {
        e.preventDefault();
        return this.player.changeName($('.name').val(), this.game);
      };

      return Lobby;

    })(Backbone.View);
    Mine = (function(_super) {

      __extends(Mine, _super);

      function Mine() {
        return Mine.__super__.constructor.apply(this, arguments);
      }

      Mine.prototype.initialize = function() {
        this.game = this.options.game;
        this.player = this.options.player;
        this.listenTo(this.game, 'change:mine', this.render);
        this.listenTo(this.game, 'change:monster', this.render);
        return this.listenTo(this.game, 'change:monsterHP', this.render);
      };

      Mine.prototype.id = 'mine';

      Mine.prototype.mineTemplate = $('#mine-template').html();

      Mine.prototype.monsterTemplate = $('#monster-template').html();

      Mine.prototype.render = function() {
        var _this = this;
        if (this.game.get('monster')) {
          this.$el.html(Mustache.render(this.monsterTemplate, {
            monster: this.game.get('monster'),
            hp: function() {
              return _this.game.get('monsterHP') / 20 * 100;
            }
          }));
        } else {
          this.$el.html(Mustache.render(this.mineTemplate, {
            mine: this.game.get('mine')
          }));
        }
        return this.$el;
      };

      Mine.prototype.events = {
        'click': 'draw'
      };

      Mine.prototype.draw = function() {
        return this.player.draw('mine', this.game);
      };

      return Mine;

    })(Backbone.View);
    Hand = (function(_super) {

      __extends(Hand, _super);

      function Hand() {
        return Hand.__super__.constructor.apply(this, arguments);
      }

      Hand.prototype.initialize = function() {
        this.game = this.options.game;
        this.player = this.options.player;
        return this.listenTo(this.player, 'change:hand', this.render);
      };

      Hand.prototype.id = 'hand';

      Hand.prototype.template = $('#hand-template').html();

      Hand.prototype.render = function() {
        console.log('hand changed');
        console.log(this.player.get('hand'));
        this.$el.html(Mustache.render(this.template, {
          hand: this.player.get('hand')
        }));
        return this.$el;
      };

      Hand.prototype.events = {
        'click .card': 'play'
      };

      Hand.prototype.play = function(e) {
        return this.player.play($(e.currentTarget).attr('data-card'), this.game);
      };

      return Hand;

    })(Backbone.View);
    Info = (function(_super) {

      __extends(Info, _super);

      function Info() {
        return Info.__super__.constructor.apply(this, arguments);
      }

      Info.prototype.initialize = function() {
        console.log('init info');
        this.player = this.options.player;
        this.game = this.options.game;
        this.listenTo(this.player, 'change', this.render);
        return $('#info').prepend(this.$el);
      };

      Info.prototype.id = 'stats';

      Info.prototype.template = $('#info-template').html();

      Info.prototype.render = function() {
        return this.$el.html(Mustache.render(this.template, {
          player: this.player.attributes
        }));
      };

      return Info;

    })(Backbone.View);
    Players = (function(_super) {

      __extends(Players, _super);

      function Players() {
        return Players.__super__.constructor.apply(this, arguments);
      }

      Players.prototype.initialize = function() {
        console.log('init players list');
        this.listenTo(this.model, 'change:players', this.render);
        return $('#info').append(this.$el);
      };

      Players.prototype.id = 'players';

      Players.prototype.template = $('#players-template').html();

      Players.prototype.render = function() {
        if (typeof this.model.get('players')[0] !== 'string') {
          return this.$el.html(Mustache.render(this.template, {
            players: this.model.get('players')
          }));
        }
      };

      return Players;

    })(Backbone.View);
    Discarded = (function(_super) {

      __extends(Discarded, _super);

      function Discarded() {
        return Discarded.__super__.constructor.apply(this, arguments);
      }

      Discarded.prototype.initialize = function() {
        this.player = this.options.player;
        this.game = this.options.game;
        return this.listenTo(this.player, 'change:discarded', this.render);
      };

      Discarded.prototype.id = 'discarded';

      Discarded.prototype.template = $('#discarded-template').html();

      Discarded.prototype.render = function() {
        var empty;
        console.log(this.player);
        if (this.player.get('discarded').length < 1) {
          empty = 'empty-card';
        } else {
          empty = 'deck card';
        }
        this.$el.html(Mustache.render(this.template, {
          discarded: this.player.get('discarded'),
          empty: empty
        }));
        return this.$el;
      };

      Discarded.prototype.events = {
        'click': 'draw'
      };

      Discarded.prototype.draw = function() {
        return this.player.draw('discarded', this.game);
      };

      return Discarded;

    })(Backbone.View);
    Played = (function(_super) {

      __extends(Played, _super);

      function Played() {
        return Played.__super__.constructor.apply(this, arguments);
      }

      Played.prototype.initialize = function() {
        this.listenTo(this.model, 'change:monster', this.render);
        return this.listenTo(this.model, 'change:monsterHP', this.render);
      };

      Played.prototype.id = 'played';

      Played.prototype.template = $('#played-template').html();

      Played.prototype.render = function() {
        var _this = this;
        if (this.model.get('monster')) {
          $('#droppable-two').append(this.$el);
          this.$el.html(Mustache.render(this.template, {
            played: this.model.get('monster'),
            hp: function() {
              return _this.model.get('monsterHP') / 20 * 100;
            }
          }));
        } else {
          $('#played').remove();
        }
        return this.$el;
      };

      return Played;

    })(Backbone.View);
    Shop = (function(_super) {

      __extends(Shop, _super);

      function Shop() {
        return Shop.__super__.constructor.apply(this, arguments);
      }

      Shop.prototype.initialize = function() {
        this.player = this.options.player;
        this.game = this.options.game;
        this.listenTo(this.model, 'change:shop', this.render);
        return this.$el.insertAfter('#container');
      };

      Shop.prototype.id = 'shop';

      Shop.prototype.template = $('#shop-template').html();

      Shop.prototype.render = function() {
        return this.$el.html(Mustache.render(this.template, {
          shop: ['sword', 'axe', 'pickaxe']
        }));
      };

      Shop.prototype.events = {
        'click .card': 'buy'
      };

      Shop.prototype.buy = function(e) {
        return this.player.buy($(e.currentTarget).attr('data-card'), this.model);
      };

      return Shop;

    })(Backbone.View);
    Log = (function(_super) {

      __extends(Log, _super);

      function Log() {
        return Log.__super__.constructor.apply(this, arguments);
      }

      Log.prototype.initialize = function() {
        this.player = this.options.player;
        this.listenTo(this.model, 'change:log', this.render);
        return $('#container').append(this.$el);
      };

      Log.prototype.id = 'log';

      Log.prototype.template = $('#log-template').html();

      Log.prototype.render = function() {
        this.$el.html(Mustache.render(this.template, {
          log: this.model.get('log')
        }));
        return this.el.scrollTop = 9999;
      };

      return Log;

    })(Backbone.View);
    Chat = (function(_super) {

      __extends(Chat, _super);

      function Chat() {
        return Chat.__super__.constructor.apply(this, arguments);
      }

      Chat.prototype.initialize = function() {
        this.player = this.options.player;
        return this.$el.insertAfter('#log');
      };

      Chat.prototype.id = 'chat-container';

      Chat.prototype.template = $('#chat-template').html();

      Chat.prototype.render = function() {
        return this.$el.html(this.template);
      };

      Chat.prototype.events = {
        'submit #chat': 'sendMessage'
      };

      Chat.prototype.sendMessage = function(e) {
        e.preventDefault();
        this.player.say($('.message').val(), this.model);
        return $('.message').val('');
      };

      return Chat;

    })(Backbone.View);
    return {
      Home: (function(_super) {

        __extends(_Class, _super);

        function _Class() {
          return _Class.__super__.constructor.apply(this, arguments);
        }

        _Class.prototype.initialize = function() {
          console.log('init home view');
          this.router = this.options.router;
          return this.listenTo(this.model, 'change:name', this.render);
        };

        _Class.prototype.id = 'home';

        _Class.prototype.template = $('#home-template').html();

        _Class.prototype.render = function() {
          this.$el.html(Mustache.render(this.template, {
            name: this.model.get('name')
          }));
          return $('#container').append(this.$el);
        };

        _Class.prototype.events = {
          'click #new-game': 'newGame',
          'submit #name': 'changeName'
        };

        _Class.prototype.newGame = function() {
          return this.router.navigate("games/create", {
            trigger: true
          });
        };

        _Class.prototype.changeName = function(e) {
          e.preventDefault();
          return this.model.changeName($('.name').val());
        };

        return _Class;

      })(Backbone.View),
      Game: (function(_super) {

        __extends(_Class, _super);

        function _Class() {
          return _Class.__super__.constructor.apply(this, arguments);
        }

        _Class.prototype.initialize = function() {
          var _this = this;
          console.log('init game view');
          this.player = this.options.player;
          this.listenTo(this.model, 'change:started', this.render);
          this.listenTo(this.player, 'change:turn', function() {
            if (_this.player.turn) {
              return alert("It's your turn.");
            }
          });
          $('#container').append(this.$el);
          return this.shopIsOpen = false;
        };

        _Class.prototype.template = $('#game-template').html();

        _Class.prototype.id = 'game';

        _Class.prototype.render = function() {
          if (this.model.get('started')) {
            if (this.lobby) {
              this.lobby.remove();
            }
            console.log(this.player);
            this.$el.html(this.template);
            this.mine = new Mine({
              game: this.model,
              player: this.player
            });
            this.$el.append(this.mine.render());
            this.discarded = new Discarded({
              game: this.model,
              player: this.player
            });
            this.$el.append(this.discarded.render());
            this.hand = new Hand({
              game: this.model,
              player: this.player
            });
            this.$el.append(this.hand.render());
            this.played = new Played({
              model: this.model
            });
            this.$el.append(this.played.render());
            this.info = new Info({
              game: this.model,
              player: this.player
            });
            this.info.render();
            this.players = new Players({
              model: this.model
            });
            this.players.render();
            this.shop = new Shop({
              model: this.model,
              player: this.player
            });
            this.shop.render();
            this.log = new Log({
              model: this.model,
              player: this.player
            });
            this.log.render();
            this.chat = new Chat({
              model: this.model,
              player: this.player
            });
            return this.chat.render();
          } else {
            if (this.lobby) {
              this.lobby.remove();
            }
            this.lobby = new Lobby({
              game: this.model,
              player: this.options.player
            });
            return this.lobby.render();
          }
        };

        _Class.prototype.events = {
          'click #end-turn-button': 'endTurn',
          'click #shop-button': 'toggleShop'
        };

        _Class.prototype.endTurn = function() {
          return this.player.endTurn(this.model);
        };

        _Class.prototype.toggleShop = function() {
          console.log('toggle shop');
          if (this.shopIsOpen) {
            this.shopIsOpen = false;
            return $('#container').css({
              '-webkit-transform': 'translateX(0)'
            });
          } else {
            this.shopIsOpen = true;
            return $('#container').css({
              '-webkit-transform': 'translateX(110px)'
            });
          }
        };

        return _Class;

      })(Backbone.View)
    };
  });

}).call(this);
