// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $(function() {
    var Routes, app, hand, models, socket, views;
    app = {
      url: "http://localhost:3000"
    };
    hand = [];
    socket = io.connect(app.url);
    Backbone.sync = function(method, model, options) {
      if (method === 'create') {
        socket.emit("create " + model.name, model, options.success);
      }
      if (method === 'read') {
        console.log("reading " + model.name);
        return socket.emit("read " + model.name, model.id, options.success);
      }
    };
    models = {
      Game: (function(_super) {

        __extends(_Class, _super);

        function _Class() {
          return _Class.__super__.constructor.apply(this, arguments);
        }

        _Class.prototype.initialize = function() {
          var _this = this;
          return socket.on(this.id, function(game) {
            _this.set(game);
            return app.view.mine.render();
          });
        };

        _Class.prototype.idAttribute = '_id';

        _Class.prototype.name = 'game';

        _Class.prototype.monster = '';

        _Class.prototype.monsterHP = 0;

        _Class.prototype.log = [];

        _Class.prototype.addPlayer = function(player) {
          return socket.emit('game add player', {
            player: player,
            game: this
          });
        };

        return _Class;

      })(Backbone.Model),
      Player: (function(_super) {

        __extends(_Class, _super);

        function _Class() {
          return _Class.__super__.constructor.apply(this, arguments);
        }

        _Class.prototype.initialize = function() {
          var _this = this;
          this.set('hand', []);
          return socket.on(this.id, function(player) {
            return _this.set(player);
          });
        };

        _Class.prototype.idAttribute = '_id';

        _Class.prototype.name = 'player';

        _Class.prototype.points = 0;

        _Class.prototype.draws = 1;

        _Class.prototype.sortHand = function(hand) {
          return socket.emit('sort hand', {
            player: this.attributes,
            hand: hand
          });
        };

        _Class.prototype.discard = function(card) {
          return socket.emit('discard', {
            game: app.game.attributes,
            player: this,
            card: card
          });
        };

        _Class.prototype.play = function(card) {
          return socket.emit('play', {
            game: app.game.attributes,
            player: this,
            card: card
          });
        };

        _Class.prototype.buy = function(card) {
          return socket.emit('buy', {
            game: app.game.attributes,
            player: this,
            card: card
          });
        };

        _Class.prototype.endTurn = function() {
          return socket.emit('end turn', {
            game: app.game.attributes,
            player: this
          });
        };

        return _Class;

      })(Backbone.Model)
    };
    views = {
      Home: (function(_super) {

        __extends(_Class, _super);

        function _Class() {
          return _Class.__super__.constructor.apply(this, arguments);
        }

        _Class.prototype.initialize = function() {
          var _this = this;
          console.log(app.player);
          return app.player.on('change:name', function() {
            return _this.render();
          });
        };

        _Class.prototype.id = 'home';

        _Class.prototype.template = $('#home-template').html();

        _Class.prototype.render = function() {
          this.$el.html(Mustache.render(this.template, {
            name: app.player.get('name')
          }));
          $('#container').append(this.$el);
          $('#name').submit(function(e) {
            e.preventDefault();
            return socket.emit('change name', {
              player: app.player,
              name: $('.name').val()
            });
          });
          return this;
        };

        _Class.prototype.events = {
          'click #new-game': 'createGame'
        };

        _Class.prototype.createGame = function() {
          app.game = new models.Game;
          return app.game.save({}, {
            success: function() {
              return app.routes.navigate("games/" + app.game.id, {
                trigger: true
              });
            }
          });
        };

        return _Class;

      })(Backbone.View),
      Game: (function(_super) {

        __extends(_Class, _super);

        function _Class() {
          return _Class.__super__.constructor.apply(this, arguments);
        }

        _Class.prototype.initialize = function() {
          this.hand = new views.Hand;
          this.hand.render();
          this.discarded = new views.Discarded;
          this.discarded.render();
          this.played = new views.Played;
          this.played.render();
          this.points = new views.Points;
          this.points.render();
          this.plays = new views.Plays;
          this.plays.render();
          this.draws = new views.Draws;
          this.draws.render();
          this.players = new views.Players;
          this.players.render();
          this.mine = new views.Mine;
          this.mine.render();
          this.shop = new views.Shop;
          this.shop.render();
          this.log = new views.Log;
          this.log.render();
          return this.$el = $('#container');
        };

        _Class.prototype.template = $('#game-template').html();

        _Class.prototype.events = {
          'click #end-turn-button': 'endTurn',
          'click #shop-button': 'toggleShop'
        };

        _Class.prototype.endTurn = function() {
          return app.player.endTurn();
        };

        _Class.prototype.toggleShop = function() {
          if ($('#container').css('-webkit-transform') === 'matrix(1, 0, 0, 1, 110, 0)') {
            return $('#container').css({
              '-webkit-transform': 'translateX(0)'
            });
          } else {
            return $('#container').css({
              '-webkit-transform': 'translateX(110px)'
            });
          }
        };

        return _Class;

      })(Backbone.View),
      Mine: (function(_super) {

        __extends(_Class, _super);

        function _Class() {
          return _Class.__super__.constructor.apply(this, arguments);
        }

        _Class.prototype.initialize = function() {
          var _this = this;
          app.game.on('change:mine', function() {
            return _this.render;
          });
          this.$el.addClass('card');
          return this.$el.insertBefore('#game > #droppable-one');
        };

        _Class.prototype.id = 'mine';

        _Class.prototype.template = $('#mine-template').html();

        _Class.prototype.render = function() {
          console.log(app.game);
          return this.$el.html(Mustache.render(this.template, {
            mine: app.game.get('mine')
          }));
        };

        _Class.prototype.events = {
          'click': 'draw'
        };

        _Class.prototype.draw = function() {
          return socket.emit('draw', {
            game: app.game,
            player: app.player,
            deck: 'mine'
          });
        };

        return _Class;

      })(Backbone.View),
      Hand: (function(_super) {

        __extends(_Class, _super);

        function _Class() {
          return _Class.__super__.constructor.apply(this, arguments);
        }

        _Class.prototype.initialize = function() {
          var _this = this;
          app.player.on('change', function() {
            return _this.render();
          });
          return this.$el.insertAfter('#game > #droppable-two');
        };

        _Class.prototype.id = 'hand';

        _Class.prototype.template = $('#hand-template').html();

        _Class.prototype.render = function() {
          this.$el.html(Mustache.render(this.template, {
            hand: app.player.get('hand')
          }));
          $('#hand').children().draggable();
          $('#droppable-one').droppable({
            accept: '#hand > .card',
            drop: function(e, ui) {
              return app.player.discard(ui.draggable.attr('data-card'));
            }
          });
          return $('#droppable-two').droppable({
            accept: '#hand > .card',
            drop: function(e, ui) {
              return app.player.play(ui.draggable.attr('data-card'));
            }
          });
        };

        _Class.prototype.events = {
          'click .card': 'play'
        };

        _Class.prototype.play = function(e) {
          return app.player.play($(e.currentTarget).attr('data-card'));
        };

        _Class.prototype.endTurn = function() {
          return app.player.endTurn();
        };

        return _Class;

      })(Backbone.View),
      Played: (function(_super) {

        __extends(_Class, _super);

        function _Class() {
          return _Class.__super__.constructor.apply(this, arguments);
        }

        _Class.prototype.initialize = function() {
          var _this = this;
          app.game.on('change:monster', function() {
            return _this.render();
          });
          app.game.on('change:monsterHP', function() {
            return _this.render();
          });
          return $('#droppable-two').append(this.$el);
        };

        _Class.prototype.id = 'played';

        _Class.prototype.template = $('#played-template').html();

        _Class.prototype.render = function() {
          if (app.game.get('monster')) {
            $('#droppable-two').append(this.$el);
            return this.$el.html(Mustache.render(this.template, {
              played: app.game.get('monster'),
              hp: app.game.get('monsterHP')
            }));
          } else {
            return $('#played').remove();
          }
        };

        return _Class;

      })(Backbone.View),
      Discarded: (function(_super) {

        __extends(_Class, _super);

        function _Class() {
          return _Class.__super__.constructor.apply(this, arguments);
        }

        _Class.prototype.initialize = function() {
          var _this = this;
          app.game.on('change:discarded', function() {
            return _this.render();
          });
          this.$el.addClass('card');
          return $('#droppable-one').append(this.$el);
        };

        _Class.prototype.id = 'discarded';

        _Class.prototype.template = $('#discarded-template').html();

        _Class.prototype.render = function() {
          this.$el.html(Mustache.render(this.template, {
            discarded: app.player.get('discarded')
          }));
          $('#discarded').click(function() {
            return socket.emit('draw', {
              game: app.game.attributes,
              player: app.player.attributes,
              deck: 'discarded'
            });
          });
          $('#discarded').children().draggable({
            revert: 'invalid'
          });
          return $('#hand').droppable({
            accept: '#discarded > .card',
            drop: function(e, ui) {
              return socket.emit('draw', {
                game: app.game.attributes,
                player: app.player.attributes,
                deck: 'discarded'
              });
            }
          });
        };

        return _Class;

      })(Backbone.View),
      Points: (function(_super) {

        __extends(_Class, _super);

        function _Class() {
          return _Class.__super__.constructor.apply(this, arguments);
        }

        _Class.prototype.initialize = function() {
          var _this = this;
          app.player.on('change:points', function() {
            return _this.render();
          });
          return this.$el.insertAfter('#shop-button');
        };

        _Class.prototype.id = 'points';

        _Class.prototype.template = $('#points-template').html();

        _Class.prototype.render = function() {
          return this.$el.html(Mustache.render(this.template, {
            points: app.player.get('points')
          }));
        };

        return _Class;

      })(Backbone.View),
      Plays: (function(_super) {

        __extends(_Class, _super);

        function _Class() {
          return _Class.__super__.constructor.apply(this, arguments);
        }

        _Class.prototype.initialize = function() {
          var _this = this;
          app.player.on('change:plays', function() {
            return _this.render();
          });
          return this.$el.insertAfter('#shop-button');
        };

        _Class.prototype.id = 'plays';

        _Class.prototype.template = $('#plays-template').html();

        _Class.prototype.render = function() {
          return this.$el.html(Mustache.render(this.template, {
            plays: app.player.get('plays')
          }));
        };

        return _Class;

      })(Backbone.View),
      Draws: (function(_super) {

        __extends(_Class, _super);

        function _Class() {
          return _Class.__super__.constructor.apply(this, arguments);
        }

        _Class.prototype.initialize = function() {
          var _this = this;
          app.player.on('change:draws', function() {
            return _this.render();
          });
          return this.$el.insertAfter('#shop-button');
        };

        _Class.prototype.id = 'draws';

        _Class.prototype.template = $('#draws-template').html();

        _Class.prototype.render = function() {
          return this.$el.html(Mustache.render(this.template, {
            draws: app.player.get('draws')
          }));
        };

        return _Class;

      })(Backbone.View),
      Players: (function(_super) {

        __extends(_Class, _super);

        function _Class() {
          return _Class.__super__.constructor.apply(this, arguments);
        }

        _Class.prototype.initialize = function() {
          var _this = this;
          app.game.on('change:players', function() {
            return _this.render();
          });
          return $('#info').append(this.$el);
        };

        _Class.prototype.id = 'players';

        _Class.prototype.template = $('#players-template').html();

        _Class.prototype.render = function() {
          return this.$el.html(Mustache.render(this.template, {
            players: app.game.get('players')
          }));
        };

        return _Class;

      })(Backbone.View),
      Shop: (function(_super) {

        __extends(_Class, _super);

        function _Class() {
          return _Class.__super__.constructor.apply(this, arguments);
        }

        _Class.prototype.initialize = function() {
          var _this = this;
          app.game.on('change:shop', function() {
            return _this.render();
          });
          return this.$el.insertAfter('#container');
        };

        _Class.prototype.id = 'shop';

        _Class.prototype.template = $('#shop-template').html();

        _Class.prototype.render = function() {
          return this.$el.html(Mustache.render(this.template, {
            shop: ['sword', 'axe', 'pickaxe', 'thief']
          }));
        };

        _Class.prototype.events = {
          'click .card': 'buy'
        };

        _Class.prototype.buy = function(e) {
          return app.player.buy($(e.currentTarget).attr('data-card'));
        };

        return _Class;

      })(Backbone.View),
      Log: (function(_super) {

        __extends(_Class, _super);

        function _Class() {
          return _Class.__super__.constructor.apply(this, arguments);
        }

        _Class.prototype.initialize = function() {
          var _this = this;
          app.game.on('change:log', function() {
            return _this.render();
          });
          return this.$el.insertAfter('#game');
        };

        _Class.prototype.id = 'log';

        _Class.prototype.template = $('#log-template').html();

        _Class.prototype.render = function() {
          this.$el.html(Mustache.render(this.template, {
            log: app.game.get('log')
          }));
          this.el.scrollTop = 9999;
          return $('#chat').submit(function(e) {
            e.preventDefault();
            return socket.emit('send message', {
              game: app.game,
              player: app.player,
              message: $('.message').val()
            });
          });
        };

        return _Class;

      })(Backbone.View)
    };
    Routes = (function(_super) {

      __extends(Routes, _super);

      function Routes() {
        return Routes.__super__.constructor.apply(this, arguments);
      }

      Routes.prototype.routes = {
        '': 'home',
        'games/:id': 'showGame'
      };

      Routes.prototype.home = function() {
        app.player = new models.Player({
          _id: sessionStorage.getItem('player id') || null
        });
        if (app.player.isNew()) {
          return app.player.save({}, {
            success: function() {
              sessionStorage.setItem('player id', app.player.id);
              app.player = new models.Player({
                _id: app.player.id
              });
              if (app.view != null) {
                app.view.remove();
              }
              app.view = new views.Home;
              return app.view.render();
            }
          });
        } else {
          return app.player.fetch({
            success: function() {
              if (app.view != null) {
                app.view.remove();
              }
              app.view = new views.Home;
              return app.view.render();
            }
          });
        }
      };

      Routes.prototype.showGame = function(id) {
        var fetchGame;
        if (app.view != null) {
          app.view.remove();
        }
        fetchGame = function() {
          app.game = new models.Game({
            _id: id
          });
          app.view = new views.Game;
          return app.game.addPlayer(app.player);
        };
        app.player = new models.Player({
          _id: sessionStorage.getItem('player id') || null
        });
        if (app.player.isNew()) {
          return app.player.save({}, {
            success: function() {
              sessionStorage.setItem('player id', app.player.id);
              app.player = new models.Player({
                _id: app.player.id
              });
              return fetchGame();
            }
          });
        } else {
          return app.player.fetch({
            success: function() {
              return fetchGame();
            }
          });
        }
      };

      return Routes;

    })(Backbone.Router);
    app.routes = new Routes;
    return Backbone.history.start();
  });

}).call(this);
