// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $(function() {
    var Game, Games, Home, Match, Mine, Player, Players, Routes, SERVER_URL, app, socket;
    SERVER_URL = "http://localhost:3000";
    socket = io.connect(SERVER_URL);
    socket.on('news', function(data) {
      console.log(data);
      return socket.emit('my other event', {
        my: 'data'
      });
    });
    Backbone.sync = function(method, model, options) {
      return socket.emit(method, model);
    };
    Game = (function(_super) {

      __extends(Game, _super);

      function Game() {
        return Game.__super__.constructor.apply(this, arguments);
      }

      Game.prototype.initialize = function() {
        var _this = this;
        console.log("initializing new Game model");
        return this.on('change', function() {
          return console.log("game changed");
        });
      };

      Game.prototype.idAttribute = "_id";

      return Game;

    })(Backbone.Model);
    Games = (function(_super) {

      __extends(Games, _super);

      function Games() {
        return Games.__super__.constructor.apply(this, arguments);
      }

      Games.prototype.initialize = function() {
        return console.log('initializing Games collection');
      };

      Games.prototype.model = Game;

      Games.prototype.url = "" + SERVER_URL + "/game";

      return Games;

    })(Backbone.Collection);
    Player = (function(_super) {

      __extends(Player, _super);

      function Player() {
        return Player.__super__.constructor.apply(this, arguments);
      }

      Player.prototype.initialize = function() {
        var _this = this;
        console.log('initializing new Player model');
        return this.on('change', function() {
          return console.log('player changed');
        });
      };

      Player.prototype.idAttribute = "_id";

      return Player;

    })(Backbone.Model);
    Players = (function(_super) {

      __extends(Players, _super);

      function Players() {
        return Players.__super__.constructor.apply(this, arguments);
      }

      Players.prototype.initialize = function() {
        return console.log('initializing Players collection');
      };

      Players.prototype.model = Player;

      Players.prototype.url = "" + SERVER_URL + "/player";

      return Players;

    })(Backbone.Collection);
    Home = (function(_super) {

      __extends(Home, _super);

      function Home() {
        return Home.__super__.constructor.apply(this, arguments);
      }

      Home.prototype.id = 'home';

      Home.prototype.template = $('#home-template').html();

      Home.prototype.render = function() {
        this.$el.html(Mustache.render(this.template, {
          newGame: 'new game'
        }));
        $('#container').append(this.$el);
        return this;
      };

      Home.prototype.events = {
        'click #new-game': 'newGame'
      };

      Home.prototype.newGame = function() {
        var _this = this;
        app.game = new Game({
          players: app.player.isNew() ? [] : [app.player.id]
        });
        console.log(app.game);
        app.games.add(app.game);
        return app.game.save({}, {
          success: function() {
            _this.remove();
            return app.routes.navigate("games/" + app.game.id, {
              trigger: true
            });
          }
        });
      };

      return Home;

    })(Backbone.View);
    Match = (function(_super) {

      __extends(Match, _super);

      function Match() {
        return Match.__super__.constructor.apply(this, arguments);
      }

      Match.prototype.initialize = function() {
        var mine;
        mine = new Mine({
          model: this.model
        });
        return mine.render();
      };

      Match.prototype.events = {
        'submit #player': 'updatePlayer',
        'click #logout': 'logout'
      };

      Match.prototype.id = 'match';

      Match.prototype.template = $('#match-template').html();

      Match.prototype.render = function() {
        var id;
        this.$el.html(Mustache.render(this.template, {
          player: app.player.get('name'),
          players: (function() {
            var _i, _len, _ref, _results;
            _ref = app.game.get('players');
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              id = _ref[_i];
              _results.push(app.players.get(id).attributes);
            }
            return _results;
          })()
        }));
        $('#container').append(this.$el);
        return this;
      };

      Match.prototype.updatePlayer = function(e) {
        var _this = this;
        e.preventDefault();
        return app.player.save({
          name: $('.player-name').val()
        }, {
          success: function() {
            sessionStorage.setItem('player', app.player.id);
            if (app.game.get('players').indexOf(app.player.id) === -1) {
              return app.game.save({
                players: app.game.get('players').concat(app.player.id)
              }, {
                success: function() {
                  return _this.render();
                }
              });
            } else {
              return _this.render();
            }
          }
        });
      };

      Match.prototype.logout = function() {
        var _this = this;
        if (!app.player.isNew()) {
          app.game.set('players', (function() {
            var playerIndex, players;
            players = app.game.get('players');
            playerIndex = app.game.get('players').indexOf(app.player.id);
            players.splice(playerIndex, 1);
            return players;
          })());
          return app.game.save({}, {
            success: function() {
              app.player = new Player({
                name: 'Anonymous'
              });
              sessionStorage.removeItem('player');
              app.players.add(app.player);
              return _this.render();
            }
          });
        }
      };

      return Match;

    })(Backbone.View);
    Mine = (function(_super) {

      __extends(Mine, _super);

      function Mine() {
        return Mine.__super__.constructor.apply(this, arguments);
      }

      Mine.prototype.initialize = function() {
        return this.listenTo(this.model, 'change', this.render);
      };

      Mine.prototype.id = 'mine';

      Mine.prototype.template = $('#mine-template').html();

      Mine.prototype.render = function() {
        this.$el.html(Mustache.render(this.template, {
          mine: this.model.get('mine')
        }));
        $('#container').append(this.$el);
        return this;
      };

      Mine.prototype.events = {
        'click #mine': 'draw'
      };

      Mine.prototype.draw = function() {
        var _this = this;
        return $.get("" + SERVER_URL + "/draw/" + this.model.id, function(res) {
          console.log(res);
          $('#cards').append("" + res + " ");
          return _this.model.fetch();
        });
      };

      return Mine;

    })(Backbone.View);
    Routes = (function(_super) {

      __extends(Routes, _super);

      function Routes() {
        return Routes.__super__.constructor.apply(this, arguments);
      }

      Routes.prototype.initialize = function() {};

      Routes.prototype.routes = {
        '': 'home',
        'games/:id': 'match'
      };

      Routes.prototype.home = function() {
        if (app.view != null) {
          app.view.remove();
        }
        app.view = new Home;
        return app.view.render();
      };

      Routes.prototype.match = function(id) {
        if (app.view != null) {
          app.view.remove();
        }
        app.game = app.games.get(id);
        app.view = new Match({
          model: app.game
        });
        return app.view.render();
      };

      return Routes;

    })(Backbone.Router);
    app = {
      games: new Games,
      players: new Players
    };
    return app.games.fetch({
      success: function() {
        return app.players.fetch({
          success: function() {
            if (sessionStorage.getItem('player')) {
              app.player = app.players.get(sessionStorage.getItem('player'));
            } else {
              app.player = new Player({
                name: 'Anonymous'
              });
              app.players.add(app.player);
            }
            app.routes = new Routes;
            return Backbone.history.start();
          }
        });
      }
    });
  });

}).call(this);
