// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $(function() {
    var Routes, SERVER_URL, app, hand, models, socket, views;
    SERVER_URL = "http://localhost:3000";
    models = {};
    views = {};
    app = {};
    hand = [];
    socket = io.connect(SERVER_URL);
    models.Game = (function(_super) {

      __extends(Game, _super);

      function Game() {
        return Game.__super__.constructor.apply(this, arguments);
      }

      Game.prototype.initialize = function() {
        var _this = this;
        return socket.on("game update " + this.id, function(game) {
          return _this.set(game);
        });
      };

      Game.prototype.idAttribute = "_id";

      return Game;

    })(Backbone.Model);
    models.Player = (function(_super) {

      __extends(Player, _super);

      function Player() {
        return Player.__super__.constructor.apply(this, arguments);
      }

      Player.prototype.initialize = function() {
        var _this = this;
        return socket.on("player update " + this.id, function(player) {
          return _this.set(player);
        });
      };

      Player.prototype.idAttribute = "_id";

      return Player;

    })(Backbone.Model);
    views.Home = (function(_super) {

      __extends(Home, _super);

      function Home() {
        return Home.__super__.constructor.apply(this, arguments);
      }

      Home.prototype.id = 'home';

      Home.prototype.template = $('#home-template').html();

      Home.prototype.render = function() {
        this.$el.html(Mustache.render(this.template));
        $('#container').append(this.$el);
        return this;
      };

      Home.prototype.events = {
        'click #new-game': 'createGame'
      };

      Home.prototype.createGame = function() {
        return socket.emit('create game', {}, function(model) {
          app.game = new models.Game(model);
          return app.routes.navigate("games/" + app.game.id, {
            trigger: true
          });
        });
      };

      return Home;

    })(Backbone.View);
    views.Game = (function(_super) {

      __extends(Game, _super);

      function Game() {
        return Game.__super__.constructor.apply(this, arguments);
      }

      Game.prototype.initialize = function() {
        var _this = this;
        return app.game.on('change', function() {
          _this.render();
          return console.log('game changed');
        });
      };

      Game.prototype.id = 'game';

      Game.prototype.template = $('#game-template').html();

      Game.prototype.render = function() {
        this.$el.html(Mustache.render(this.template, {
          game: app.game.attributes,
          hand: hand
        }));
        $('#container').append(this.$el);
        return this;
      };

      Game.prototype.events = {
        'click #mine': 'draw'
      };

      Game.prototype.draw = function() {
        return socket.emit('draw mine', app.game.id, function(result) {
          hand.push(result.card);
          return app.game.set('mine', result.mine);
        });
      };

      return Game;

    })(Backbone.View);
    Routes = (function(_super) {

      __extends(Routes, _super);

      function Routes() {
        return Routes.__super__.constructor.apply(this, arguments);
      }

      Routes.prototype.routes = {
        '': 'home',
        'games/:id': 'readGame'
      };

      Routes.prototype.home = function() {
        if (app.view != null) {
          app.view.remove();
        }
        app.view = new views.Home;
        return app.view.render();
      };

      Routes.prototype.readGame = function(id) {
        if (app.game == null) {
          return socket.emit('read game', id, function(model) {
            app.game = new models.Game(model);
            app.view = new views.Game;
            return app.view.render();
          });
        } else {
          app.view = new views.Game;
          return app.view.render();
        }
      };

      return Routes;

    })(Backbone.Router);
    app.routes = new Routes;
    return Backbone.history.start();
  });

}).call(this);
